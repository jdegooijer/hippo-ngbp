What did I want to achieve:
  - 1 angular place to work from and compile from per (hippo) maven project
  - 1 build system to maintain per maven project or even for all maven projects
  - best practises styleguide for AngularJS easily accesible for new/experienced devs
  - extendable structure for complex application so we can move old front-end code to angular in steps
  - Build API module separately for a project so plugins of the maven project can depend on it and use it,
    this means exposing 1 jar and 1 API.zip for maven nexus
 (- autocomplete for bower libraries by intellij)

Grunt can optimize the angularjs app for dist and also build the API module
folder separately so it can be included by other maven projects

Using JohnPapa's AngularJS Styleguide +
Every component is its own angular module, wired through module dependencies
makes it easy to lazy load parts of apps and in our case build a separate API module

Folder structure:
- Main project
  - [Some back-end maven modules]

  - front-end module
    - node_modules
    - bower_components
    - [jspm_packages]
    - src
      - main
        - java stuff / old front-end?
      - test
        - java test stuff / old front-end tests?

      - webapp (the interesting part :D)
        - fonts (Only allowed in hippo-theme)
        - images (Only allowed in hippo-theme)
        - styles (Only allowed in hippo-theme)
          - [pkg.name].less/scss
          - other style files
        - angularjs
          - components (all subcomponents of current component go here, use folder name components because Angular2/1.4+ routing is 'component based')
            - API (external api) folder
              - [components]
              - [controllers]
              - [directives]
              - [filters]
              - [services]
              - api.js
              - api.spec.js
            - state1 component folder
              - [components]
              - [controllers]
              - [directives]
              - [filters]
              - [services]
              - state1.js
              - state1.spec.js
              - state1.e2e.js
              - state1.html
            - state2 component folder
              - [components]
              - [controllers]
              - [directives]
              - [filters]
              - [services]
              - state2sub component folder
                - [components]
                - [controllers]
                - [directives]
                - [filters]
                - [services]
                - state2sub.js
                - state2sub.spec.js
                - state2sub.e2e.js
                - state2sub.html
              - state2.js
              - state2.spec.js
              - state2.e2e.js
              - state2.html
          - [controllers]
            - some.controller.js
            - some.controller.spec.js
          - [directives]
            - [some-directive] (folder)
              - some.directive.js
              - some.directive.spec.js
              - some.directive.html
              - some.directive.less/scss (Only allowed in hippo-theme)
          - [filters]
            - some.filter.js
            - some.filter.spec.js
          - [services]
            - some.service.js
            - some.service.spec.js
          - [pkg.name].js (includes angular.bootstrap function to determine what module to start as app)
          - [pkg.name].spec.js
          - [pkg.name].e2e.js
          - [pkg.name].html
        - index.html
      - package.json (contains pkg.name, pkg.name === project name)
      - build.config.js
      - bower.json
      - gulpfile.js
        If we have the same structure everywhere we can require the build system as a nodejs module
      - [system.config.js]
      - [karma.config.js]
      - [protractor.config.js]
    - target
      - api
        - api files
      - classes.webapp
        - optimized front-end app
          Should switch to unoptimized version on wicked development mode?
      - [pkg-name-version].jar
      - [pkg-name-version].api.zip
      - [pkg-name-version].sources.jar

  - front-end-api module
    - Old front-end api from wicked + java?

  - [Some more back-end maven modules]